{
  "original_agent_py": "# PydanticAI Agent with MCP\n\nfrom pydantic_ai import Agent, RunContext\nfrom pydantic_ai.mcp import MCPServerStdio\nfrom pydantic_ai.models.openai import OpenAIModel\nfrom pydantic_ai.providers.openai import OpenAIProvider\n\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\n\nimport logfire\nif os.getenv(\"LOGFIRE_API_KEY\"):\n    logfire.configure(token=os.getenv(\"LOGFIRE_API_KEY\"))\n    logfire.instrument_openai()\n\n# Set up OpenRouter based model\nAPI_KEY = os.getenv('OPENROUTER_API_KEY')\nmodel = OpenAIModel(\n    'anthropic/claude-3.5-sonnet',\n    provider=OpenAIProvider(\n        base_url='https://openrouter.ai/api/v1', \n        api_key=API_KEY\n    ),\n)\n\n# MCP Environment variables\nenv = {\n    \"SERPER_API_KEY\": os.getenv(\"SERPER_API_KEY\"),\n}\n\nif not os.getenv(\"SERPER_API_KEY\"):\n    print(\"Warning: SERPER_API_KEY environment variable not set\")\n    print(\"Google search functionality will not work\")\n\n# Set the path to the MCP server - this assumes we're running from the project root\nmcp_path = os.path.join(os.getcwd(), \"mcp_server.py\")\nmcp_servers = [\n    MCPServerStdio('python', [mcp_path], env=env),\n]\n\nfrom datetime import datetime, timezone\n\n# Set up Agent with Server\nagent_name = \"SerperScraperAgent\"\ndef load_agent_prompt(agent:str):\n    \"\"\"Loads given agent replacing `time_now` var with current time\"\"\"\n    print(f\"Loading {agent}\")\n    time_now = datetime.now(timezone.utc).strftime(\"%Y-%m-%d %H:%M:%S\")\n    agent_path = os.path.join(os.getcwd(), \"agents\", f\"{agent}.md\")\n    with open(agent_path, \"r\") as f:\n        agent_prompt = f.read()\n    agent_prompt = agent_prompt.replace('{time_now}', time_now)\n    return agent_prompt\n\n# Load up the agent system prompt\nagent_prompt = load_agent_prompt(agent_name)\nprint(f\"Loaded agent prompt for {agent_name}\")\nagent = Agent(model, mcp_servers=mcp_servers, system_prompt=agent_prompt)\n\nimport random, traceback\nimport asyncio\n\nasync def main():\n    \"\"\"CLI testing in a conversation with the agent\"\"\"\n    async with agent.run_mcp_servers(): \n\n        message_history = []\n        result = None\n\n        print(\"\\nSerperScraperAgent ready! Type your message (Ctrl+C to exit)\\n\")\n        while True:\n            if result:\n                print(f\"\\n{result.output}\")\n            user_input = input(\"\\n> \")\n            err = None\n            for i in range(0, 3):\n                try:\n                    result = await agent.run(\n                        user_input, \n                        message_history=message_history\n                    )\n                    break\n                except Exception as e:\n                    err = e\n                    traceback.print_exc()\n                    if len(message_history) > 2:\n                        message_history.pop(0)\n                    await asyncio.sleep(2)\n            if result is None:\n                print(f\"\\nError {err}. Try again...\\n\")\n                continue\n            message_history.extend(result.new_messages())\n            while len(message_history) > 6:\n                message_history.pop(0)\n\n        \nif __name__ == \"__main__\":\n    asyncio.run(main())\n"
}